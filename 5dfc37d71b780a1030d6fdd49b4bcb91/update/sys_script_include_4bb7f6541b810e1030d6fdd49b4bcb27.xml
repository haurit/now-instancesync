<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_instanc_sync.JobRunner</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>JobRunner</name>
        <script><![CDATA[var JobRunner = Class.create();
JobRunner.prototype = {
	initialize: function () {
		this.bLog = false;
		this.sLogLevel = 'basic'; // basic, elevated, all
		this.iMaxRetryCount = Number(gs.getProperty('x_snc_instanc_sync.max.retry', 5));
		if (isNaN(this.iMaxRetryCount)) {
			this.iMaxRetryCount = 5;
		} // if max retry is not a number set default
		this._gt = new global.GlobalTools();
		this._gtArray = new global.GlobalToolsArray();
		this._gtObject = new global.GlobalToolsObject();
		this._gtTable = new global.GlobalToolsTable();
		this._gtRecordRead = new global.GlobalToolsRecordRead();
		this._gtRecordWriteValidate = new global.GlobalToolsRecordWriteValidate();
		this._gtAttachment = new global.GlobalToolsAttachment();
		this._gdDigest = new GlideDigest();
	}, // function initialize

	runTrigger: function (grJobLogTableChunk) {
		if (this.bLog) { gs.info('JobRunner.runTrigger started'); }
		try {
			var dtNow = new GlideDateTime();
			var sChunkId = grJobLogTableChunk.getUniqueValue();
			grJobLogTableChunk.setValue('start_time', dtNow);
			var grJobLog = new GlideRecord('x_snc_instanc_sync_job_log');
			var grJobLogTable = new GlideRecord('x_snc_instanc_sync_job_log_table');
			if ((grJobLog.get(grJobLogTableChunk.getValue('job_log'))) && (grJobLogTable.get(grJobLogTableChunk.getValue('job_log_table')))) {
				var sTableId = grJobLogTable.getValue('table');
				var sTableName = (sTableId) ? String(grJobLogTable.table.name) : '';
				var sMappedClass = grJobLogTable.getValue('mapped_class');
				var grJobConfig = new GlideRecord('x_snc_instanc_sync_job_config');
				if ((grJobConfig.get(grJobLog.getValue('job_config'))) && (sTableName)) {
					var _gtRESTAPI = new global.GlobalToolsRESTAPI(grJobConfig.getValue('connection_credential_alias', this.bLog, false, this.sLogLevel));
					var _getJobCfg = new x_snc_json_cfg_mgr.getCfg(grJobConfig.getValue('json_configuration'));
					var bValidConfig = false;
					var oJobCfg = _getJobCfg.getConfig();
					var oTableCfg = {};
					var aHierarchy = this._gtTable.getTableHierarchy(sTableName);
					if (sMappedClass) {
						var _getTableCfg = new x_snc_json_cfg_mgr.getCfg(this._gtObject.getValue('job/sTableJSONPrefix', '', oJobCfg) + sMappedClass);
						if (_getTableCfg) {
							oTableCfg = _getTableCfg.getConfig();
							if (oTableCfg.hasOwnProperty('config')) {
								bValidConfig = true;
							} // if valid config
						} // if config found
					} else {
						if (this._gtArray.isValidArray(aHierarchy)) {
							aHierarchy.some(function (sTableInHierarchy) {
								if (sTableInHierarchy != 'cmdb') {
									var _getTableCfg = new x_snc_json_cfg_mgr.getCfg(this._gtObject.getValue('job/sTableJSONPrefix', '', oJobCfg) + sTableInHierarchy);
									if (_getTableCfg) {
										oTableCfg = _getTableCfg.getConfig();
										if (oTableCfg.hasOwnProperty('config')) {
											bValidConfig = true;
											return true;
										} // if valid obj
									} // if config
								} // if not cmdb root
							}, this); // each table in hierarchy
						} // if hierarchy
					} // if mapped class dedicated mapping required
					if (bValidConfig) {
						var oJob = this._gtObject.deepMerge(this._gtObject.getValue('job', {}, oJobCfg), this._gtObject.getValue('job', {}, oTableCfg));
						var oConfig = this._gtObject.deepMerge(this._gtObject.getValue('config', {}, oJobCfg), this._gtObject.getValue('config', {}, oTableCfg),);
						//gs.info('tomtom oJob: ' + JSON.stringify(oJob) + ' oConfig: ' + JSON.stringify(oConfig));
						var bDeltaCompareAttachment = this._gtObject.getValue('bDeltaCompareAttachment', false, oJob);
						var aDeltaCompareRemoveFields = this._gtObject.getValue('aDeltaCompareRemoveFields', [], oJob);
						var bLogErrorDetails = this._gtObject.getValue('bLogErrorDetails', false, oJob);
						var aLogErrorDetailTypes = this._gtObject.getValue('aLogErrorDetailTypes', ['all'], oJob);
						if (bLogErrorDetails) {
							this._gtObject.setValue('sErrorReturnType', 'full', oConfig);
						} // if log error details
						var iChunkSize = grJobLogTableChunk.getValue('chunksize');
						var sQuery = grJobLogTableChunk.getValue('condition');
						sQuery = (sQuery) ? sQuery : grJobLogTable.getValue('condition');
						var iOffset = grJobLogTableChunk.getValue('offset');
						var iSuccessRecordCount = 0;
						var iNoOpRecordCount = 0;
						var iErrorCount = 0;
						var iErrorCode = -103; // undefined error
						try {
							var gdtStart = new GlideDateTime();
							var aRecords = (sMappedClass) ? _gtRESTAPI.doNOWRESTQuery(sMappedClass, sQuery, iOffset, iChunkSize) : _gtRESTAPI.doNOWRESTQuery(sTableName, sQuery, iOffset, iChunkSize);
							var gdtEnd = new GlideDateTime();
							var iDuration = gdtEnd.getNumericValue() - gdtStart.getNumericValue();
							grJobLogTableChunk.rest_request_duration.setDateNumericValue(iDuration);
						} catch (oEx) {
							aRecords = '';
							if (String(oEx).indexOf('33554432') != -1) {
								iErrorCode = -105;
								gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' sChunkId: ' + sChunkId + ' iErrorCode: ' + iErrorCode + ' iChunkSize: ' + iChunkSize + ' iOffset: ' + iOffset + ' Error: ' + String(oEx));
							} else {
								iErrorCode = -104; // Undefined error during rest query
								gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' error in rest query: ' + String(oEx));
							} // if string to long
						} // if catch
						var sSysId = '', sName = '', sTargetId = '';
						if (this._gtArray.isValidArray(aRecords)) {
							aRecords.forEach(function (oRecord) {
								if (oRecord.hasOwnProperty('sys_id')) {
									var oError = {};
									var oRecordCompare = JSON.parse(JSON.stringify(oRecord));
									try {
										var sSysId = this._gtObject.getValue('sys_id', '', oRecord);
										var sClassName = this._gtObject.getValue('sys_class_name', '', oRecord);
										if (sMappedClass) {
											sClassName = sTableName;
											this._gtObject.setValue('sys_class_name', sClassName, oRecord);
										} // if mapped class
										this._gtObject.setValue('sTargetTable', sClassName, oConfig);
										if (this._gtArray.isValidArray(aDeltaCompareRemoveFields)) {
											aDeltaCompareRemoveFields.forEach(function (sDeltaCompareRemoveField) {
												delete oRecordCompare[sDeltaCompareRemoveField];
											}); // each remove delta field
										} // if delta compare remove field
										var bChangeDetected = (bDeltaCompareAttachment) ? false : true;
										if (bDeltaCompareAttachment) {
											var sCIBOOSTHash = '';
											var grSIMCIAttachment = this._gtRecordRead.getRecord('sys_attachment', 'table_name=ZZ_YY' + sClassName + '^table_sys_id=' + sSysId + '^file_name=sim_' + sSysId + '.json');
											if (grSIMCIAttachment) {
												sCIBOOSTHash = grSIMCIAttachment.getValue('hash');
											} // if attachment
											var sCISIMHash = String(this._gdDigest.getSHA256Hex(JSON.stringify(oRecordCompare))).toLocaleLowerCase();
											if (sCISIMHash != sCIBOOSTHash) {
												bChangeDetected = true;
											} // if hash is not same
										} // if compare attachment
										if (bChangeDetected === true) {
											var sResultId = this._gtRecordWriteValidate.validateAndWrite(oConfig, oRecord, oError);
											if ((sResultId) && (sResultId != -1)) {
												iSuccessRecordCount++;
												if (bDeltaCompareAttachment) {
													this._gtAttachment.deleteAttachment(sClassName, sSysId, 'sim_' + sSysId + '.json', true);
													this._gtAttachment.writeAttachmentByTableId(sClassName, sSysId, 'sim_' + sSysId + '.json', JSON.stringify(oRecordCompare), '', false, true);
												} // if compare attachment
												if (this._gtObject.getValue('default/bError', false, oError)) {
													this._writeRecordError(sTableId, sTableName, sSysId, sName, oError, aLogErrorDetailTypes, grJobLogTableChunk);
												} // mapping error
											} else {
												iErrorCount++;
												sName = (oRecord.hasOwnProperty('number')) ? oRecord['number'] : '';
												sName = (!sName) && (oRecord.hasOwnProperty('name')) ? oRecord['name'] : '';
												this._writeRecordError(sTableId, sTableName, sSysId, sName, oError, aLogErrorDetailTypes, grJobLogTableChunk);
											} // if result
										} else {
											iNoOpRecordCount++;
										} // if diff
									} catch (oEx) {
										iErrorCount++;
										//gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' error writing record: ' + String(oEx));
										this._writeRecordError(sTableId, sTableName, sSysId, '', { code: -97, message: String(oEx) }, aLogErrorDetailTypes, grJobLogTableChunk);
									} // if catch
								} else {
									iErrorCount++;
									//gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' sSysId: empty oRecord: ' + JSON.stringify(oRecord));
									this._writeRecordError(sTableId, sTableName, '', '', { code: -98, message: 'No SysId in Payload' }, aLogErrorDetailTypes, grJobLogTableChunk);
								} // if no sys id
							}, this); // each record
							grJobLogTableChunk.setValue('successful_record_count', iSuccessRecordCount);
							grJobLogTableChunk.setValue('no_operation_count', iNoOpRecordCount);
							grJobLogTableChunk.setValue('error_count', iErrorCount);
							grJobLogTableChunk.setValue('status', 'completed');
							grJobLogTableChunk.setValue('error_code', 0);
						} else if (iErrorCode == -105) {
							grJobLogTableChunk.setValue('status', 'pending_retry');
							grJobLogTableChunk.setValue('error_code', -105); // error string size to big
						} else {
							if ((aRecords) && (typeof aRecords == 'object') && (aRecords.hasOwnProperty('error_code'))) {
								iErrorCode = aRecords['error_code'];
							} // if has error code
							grJobLogTableChunk.setValue('error_code', iErrorCode); // error no records
							if (iErrorCode == '204') {
								grJobLogTableChunk.setValue('status', 'completed');
							} else {
								var iCurrentRetryCount = Number(grJobLogTableChunk.getValue('retry_count')) + 1;
								var sStatus = (iCurrentRetryCount < this.iMaxRetryCount) ? 'pending_retry' : 'failed';
								grJobLogTableChunk.setValue('status', sStatus);
								grJobLogTableChunk.setValue('retry_count', iCurrentRetryCount);
							} // if no content
						} // if records
					} else {
						grJobLogTableChunk.setValue('status', 'failed');
						grJobLogTableChunk.setValue('error_code', -106); // error config not found
					} // if no valid config
				} else {
					grJobLogTableChunk.setValue('status', 'failed');
					grJobLogTableChunk.setValue('error_code', -101); // error loading job config or table name empty
				} // if no config
			} else {
				grJobLogTableChunk.setValue('status', 'failed');
				grJobLogTableChunk.setValue('error_code', -100); // error loading job table or job
			} // if job table
			dtNow = new GlideDateTime();
			grJobLogTableChunk.setValue('end_time', dtNow);
			if (!grJobLogTableChunk.update()) {
				gs.error('JobRunner.runTrigger error writing chunk record: ' + sChunkId + ' Error: ' + grJobLogTableChunk.getLastErrorMessage());
			} // if error
		} catch (oEx) {
			gs.error('JobRunner.runTrigger error with message: ' + String(oEx));
		} // initiate job
		if (this.bLog) { gs.info('JobRunner.runTrigger ended'); }
	}, // function runTrigger

	_writeRecordError: function (sTableId, sTableName, sRecordSysId, sRecordName, oError, aLogErrorDetailTypes, grJobLogTableChunk) {
		//gs.info('tomtom sTableId: ' + sTableId + ' sRecordSysId: ' + sRecordSysId + ' sRecordName: ' + sRecordName + ' oError: ' + JSON.stringify(oError));
		var aErrorMessages = this._gtObject.getValue('default/aErrorMessages', [], oError);
		var aMappingErrors = [];
		var grRecordError = new GlideRecord('x_snc_instanc_sync_job_log_record_error');
		grRecordError.setValue('job_log', grJobLogTableChunk.getValue('job_log'));
		grRecordError.setValue('job_log_table', grJobLogTableChunk.getValue('job_log_table'));
		grRecordError.setValue('job_log_table_chunk', grJobLogTableChunk.getUniqueValue());
		if ((this._gtObject.getValue('default/bNoActionError', true, oError) === false) && (this._gtObject.getValue('default/bFatalError', true, oError) === false)) {
			grRecordError.setValue('status', 1);
		} // if inserted
		grRecordError.setValue('table', sTableId);
		grRecordError.setValue('remote_record_sysid', sRecordSysId);
		grRecordError.setValue('remote_record_display_name', sRecordName);
		grRecordError.setValue('error_messages', JSON.stringify(aErrorMessages));
		if (this._gtArray.isValidArray(aErrorMessages)) {
			var aMessageDetailArgs = [], sErrorCode = '', sFieldId = '', sValue = '', sValidValues = '', aHierarchy = [], grDict, grMappingError, sMappingErrorId;
			aErrorMessages.forEach(function (oErrorMsg) {
				if ((!this._gtArray.isValidArray(aLogErrorDetailTypes)) || (aLogErrorDetailTypes[0] == 'all') || (aLogErrorDetailTypes.indexOf(this._gtObject.getValue('sErrorType', '', oErrorMsg)) != -1)) {
					aMessageDetailArgs = this._gtObject.getValue('aMessageDetailArgs', '', oErrorMsg);
					if (this._gtArray.isValidArray(aMessageDetailArgs)) {
						sErrorCode = this._gtObject.getValue('sCode', '', oErrorMsg);
						sFieldId = aMessageDetailArgs[0];
						sValue = aMessageDetailArgs[1];
						sValidValues = aMessageDetailArgs[2];
						if ((sFieldId) && (sValue)) {
							aHierarchy = this._gtTable.getTableHierarchy(sTableName);
							aHierarchy.reverse();
							aHierarchy.some(function (sDictField) {
								grDict = this._gtRecordRead.getRecord('sys_dictionary', 'name=' + sDictField + '^element=' + sFieldId, false, false, false);
								if (grDict) {
									sFieldId = grDict.getUniqueValue();
									return true;
								} // if value
							}, this); // field
							grMappingError = new GlideRecord('x_snc_instanc_sync_job_log_mapping_error');
							grMappingError.addEncodedQuery('job_log=' + grJobLogTableChunk.getValue('job_log') + '^field=' + sFieldId + '^value=' + sValue);
							grMappingError.setLimit(1);
							grMappingError.query();
							if (grMappingError.next()) {
								sMappingErrorId = grMappingError.getUniqueValue();
								if (sMappingErrorId) {
									aMappingErrors.push(sMappingErrorId);
								} // if mapping id
							} else {
								grMappingError.setValue('job_log', grJobLogTableChunk.getValue('job_log'));
								grMappingError.setValue('field', sFieldId);
								grMappingError.setValue('error_code', sErrorCode);
								grMappingError.setValue('value', sValue);
								grMappingError.setValue('valid_values', sValidValues);
								sMappingErrorId = grMappingError.insert();
								if (sMappingErrorId) {
									aMappingErrors.push(sMappingErrorId);
								} else {
									gs.error('JobRunner._writeRecordError error writing mapping error record for chunk ' + grJobLogTableChunk.getUniqueValue() + ' record ' + sRecordSysId + '. Error: ' + grMappingError.getLastErrorMessage());
								} // if error on insert
							} // if error does not exist
						} // if field and value
					} // if error detail args
				} // if value error
			}, this); // each error message
		} // if error messages
		grRecordError.setValue('mapping_errors', aMappingErrors.join(','));
		if (!grRecordError.insert()) {
			gs.error('JobRunner._writeRecordError error writing error record for chunk ' + grJobLogTableChunk.getUniqueValue() + ' record ' + sRecordSysId + '. Error: ' + grRecordError.getLastErrorMessage());
		} // if error on insert
	}, // function _writeRecordError

	type: 'JobRunner',
	version: '1.0.0',
	author: 'ServiceNow Customer Outcomes, Tom Hauri',
	email: 'tom@hauri.biz',
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-03-16 05:32:21</sys_created_on>
        <sys_id>4bb7f6541b810e1030d6fdd49b4bcb27</sys_id>
        <sys_mod_count>74</sys_mod_count>
        <sys_name>JobRunner</sys_name>
        <sys_package display_value="Instance Sync" source="x_snc_instanc_sync">5dfc37d71b780a1030d6fdd49b4bcb91</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Instance Sync">5dfc37d71b780a1030d6fdd49b4bcb91</sys_scope>
        <sys_update_name>sys_script_include_4bb7f6541b810e1030d6fdd49b4bcb27</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-06-12 06:13:14</sys_updated_on>
    </sys_script_include>
</record_update>
